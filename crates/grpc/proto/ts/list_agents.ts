// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "list_agents.proto" (package "list_agents", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message list_agents.ListAgentsRequest
 */
export interface ListAgentsRequest {
    /**
     * @generated from protobuf field: int32 limit = 1
     */
    limit: number;
    /**
     * @generated from protobuf field: int32 offset = 2
     */
    offset: number;
}
/**
 * @generated from protobuf message list_agents.ListAgentsResponse
 */
export interface ListAgentsResponse {
    /**
     * @generated from protobuf field: repeated list_agents.ListAgent agents = 1
     */
    agents: ListAgent[];
}
/**
 * @generated from protobuf message list_agents.ListAgent
 */
export interface ListAgent {
    /**
     * @generated from protobuf field: string agent_id = 1
     */
    agentId: string;
    /**
     * @generated from protobuf field: string agent_name = 2
     */
    agentName: string;
    /**
     * @generated from protobuf field: string bio = 3
     */
    bio: string;
    /**
     * @generated from protobuf field: string creator = 4
     */
    creator: string;
    /**
     * @generated from protobuf field: optional string wallet_address = 5
     */
    walletAddress?: string;
    /**
     * @generated from protobuf field: list_agents.ListAgentsHypurrLaunch hypurr_launches = 6
     */
    hypurrLaunches?: ListAgentsHypurrLaunch;
    /**
     * @generated from protobuf field: repeated list_agents.ListAgentsChannel channels = 7
     */
    channels: ListAgentsChannel[];
}
/**
 * @generated from protobuf message list_agents.ListAgentsChannel
 */
export interface ListAgentsChannel {
    /**
     * @generated from protobuf field: string channel_type = 1
     */
    channelType: string;
    /**
     * @generated from protobuf field: string channel_name = 2
     */
    channelName: string;
    /**
     * @generated from protobuf field: string main_identifier = 3
     */
    mainIdentifier: string;
    /**
     * @generated from protobuf field: optional string secondary_identifier = 4
     */
    secondaryIdentifier?: string;
}
/**
 * @generated from protobuf message list_agents.ListAgentsHypurrLaunch
 */
export interface ListAgentsHypurrLaunch {
    /**
     * @generated from protobuf field: string token_ticker = 1
     */
    tokenTicker: string;
    /**
     * @generated from protobuf field: string token_address = 2
     */
    tokenAddress: string;
    /**
     * @generated from protobuf field: string listed_timestamp = 3
     */
    listedTimestamp: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class ListAgentsRequest$Type extends MessageType<ListAgentsRequest> {
    constructor() {
        super("list_agents.ListAgentsRequest", [
            { no: 1, name: "limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "offset", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ListAgentsRequest>): ListAgentsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.limit = 0;
        message.offset = 0;
        if (value !== undefined)
            reflectionMergePartial<ListAgentsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListAgentsRequest): ListAgentsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 limit */ 1:
                    message.limit = reader.int32();
                    break;
                case /* int32 offset */ 2:
                    message.offset = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListAgentsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 limit = 1; */
        if (message.limit !== 0)
            writer.tag(1, WireType.Varint).int32(message.limit);
        /* int32 offset = 2; */
        if (message.offset !== 0)
            writer.tag(2, WireType.Varint).int32(message.offset);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message list_agents.ListAgentsRequest
 */
export const ListAgentsRequest = new ListAgentsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListAgentsResponse$Type extends MessageType<ListAgentsResponse> {
    constructor() {
        super("list_agents.ListAgentsResponse", [
            { no: 1, name: "agents", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ListAgent }
        ]);
    }
    create(value?: PartialMessage<ListAgentsResponse>): ListAgentsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.agents = [];
        if (value !== undefined)
            reflectionMergePartial<ListAgentsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListAgentsResponse): ListAgentsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated list_agents.ListAgent agents */ 1:
                    message.agents.push(ListAgent.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListAgentsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated list_agents.ListAgent agents = 1; */
        for (let i = 0; i < message.agents.length; i++)
            ListAgent.internalBinaryWrite(message.agents[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message list_agents.ListAgentsResponse
 */
export const ListAgentsResponse = new ListAgentsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListAgent$Type extends MessageType<ListAgent> {
    constructor() {
        super("list_agents.ListAgent", [
            { no: 1, name: "agent_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "agent_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "bio", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "creator", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "wallet_address", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "hypurr_launches", kind: "message", T: () => ListAgentsHypurrLaunch },
            { no: 7, name: "channels", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ListAgentsChannel }
        ]);
    }
    create(value?: PartialMessage<ListAgent>): ListAgent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.agentId = "";
        message.agentName = "";
        message.bio = "";
        message.creator = "";
        message.channels = [];
        if (value !== undefined)
            reflectionMergePartial<ListAgent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListAgent): ListAgent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string agent_id */ 1:
                    message.agentId = reader.string();
                    break;
                case /* string agent_name */ 2:
                    message.agentName = reader.string();
                    break;
                case /* string bio */ 3:
                    message.bio = reader.string();
                    break;
                case /* string creator */ 4:
                    message.creator = reader.string();
                    break;
                case /* optional string wallet_address */ 5:
                    message.walletAddress = reader.string();
                    break;
                case /* list_agents.ListAgentsHypurrLaunch hypurr_launches */ 6:
                    message.hypurrLaunches = ListAgentsHypurrLaunch.internalBinaryRead(reader, reader.uint32(), options, message.hypurrLaunches);
                    break;
                case /* repeated list_agents.ListAgentsChannel channels */ 7:
                    message.channels.push(ListAgentsChannel.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListAgent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string agent_id = 1; */
        if (message.agentId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.agentId);
        /* string agent_name = 2; */
        if (message.agentName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.agentName);
        /* string bio = 3; */
        if (message.bio !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.bio);
        /* string creator = 4; */
        if (message.creator !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.creator);
        /* optional string wallet_address = 5; */
        if (message.walletAddress !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.walletAddress);
        /* list_agents.ListAgentsHypurrLaunch hypurr_launches = 6; */
        if (message.hypurrLaunches)
            ListAgentsHypurrLaunch.internalBinaryWrite(message.hypurrLaunches, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated list_agents.ListAgentsChannel channels = 7; */
        for (let i = 0; i < message.channels.length; i++)
            ListAgentsChannel.internalBinaryWrite(message.channels[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message list_agents.ListAgent
 */
export const ListAgent = new ListAgent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListAgentsChannel$Type extends MessageType<ListAgentsChannel> {
    constructor() {
        super("list_agents.ListAgentsChannel", [
            { no: 1, name: "channel_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "channel_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "main_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "secondary_identifier", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListAgentsChannel>): ListAgentsChannel {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.channelType = "";
        message.channelName = "";
        message.mainIdentifier = "";
        if (value !== undefined)
            reflectionMergePartial<ListAgentsChannel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListAgentsChannel): ListAgentsChannel {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string channel_type */ 1:
                    message.channelType = reader.string();
                    break;
                case /* string channel_name */ 2:
                    message.channelName = reader.string();
                    break;
                case /* string main_identifier */ 3:
                    message.mainIdentifier = reader.string();
                    break;
                case /* optional string secondary_identifier */ 4:
                    message.secondaryIdentifier = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListAgentsChannel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string channel_type = 1; */
        if (message.channelType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.channelType);
        /* string channel_name = 2; */
        if (message.channelName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.channelName);
        /* string main_identifier = 3; */
        if (message.mainIdentifier !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.mainIdentifier);
        /* optional string secondary_identifier = 4; */
        if (message.secondaryIdentifier !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.secondaryIdentifier);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message list_agents.ListAgentsChannel
 */
export const ListAgentsChannel = new ListAgentsChannel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListAgentsHypurrLaunch$Type extends MessageType<ListAgentsHypurrLaunch> {
    constructor() {
        super("list_agents.ListAgentsHypurrLaunch", [
            { no: 1, name: "token_ticker", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "token_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "listed_timestamp", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListAgentsHypurrLaunch>): ListAgentsHypurrLaunch {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tokenTicker = "";
        message.tokenAddress = "";
        message.listedTimestamp = "";
        if (value !== undefined)
            reflectionMergePartial<ListAgentsHypurrLaunch>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListAgentsHypurrLaunch): ListAgentsHypurrLaunch {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string token_ticker */ 1:
                    message.tokenTicker = reader.string();
                    break;
                case /* string token_address */ 2:
                    message.tokenAddress = reader.string();
                    break;
                case /* string listed_timestamp */ 3:
                    message.listedTimestamp = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListAgentsHypurrLaunch, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string token_ticker = 1; */
        if (message.tokenTicker !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.tokenTicker);
        /* string token_address = 2; */
        if (message.tokenAddress !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.tokenAddress);
        /* string listed_timestamp = 3; */
        if (message.listedTimestamp !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.listedTimestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message list_agents.ListAgentsHypurrLaunch
 */
export const ListAgentsHypurrLaunch = new ListAgentsHypurrLaunch$Type();
