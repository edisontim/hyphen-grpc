// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "auth.proto" (package "auth", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message auth.SIWEChallengeRequest
 */
export interface SIWEChallengeRequest {
    /**
     * @generated from protobuf field: string eth_address = 1
     */
    ethAddress: string;
    /**
     * @generated from protobuf field: optional uint64 chain_id = 2
     */
    chainId?: bigint;
}
/**
 * @generated from protobuf message auth.SIWEChallengeResponse
 */
export interface SIWEChallengeResponse {
    /**
     * @generated from protobuf field: string siwe_message = 1
     */
    siweMessage: string;
}
/**
 * @generated from protobuf message auth.SIWEVerifyRequest
 */
export interface SIWEVerifyRequest {
    /**
     * @generated from protobuf field: string eth_address = 1
     */
    ethAddress: string;
    /**
     * @generated from protobuf field: string siwe_message = 2
     */
    siweMessage: string;
    /**
     * @generated from protobuf field: string signature = 3
     */
    signature: string;
}
/**
 * @generated from protobuf message auth.SIWEVerifyResponse
 */
export interface SIWEVerifyResponse {
    /**
     * @generated from protobuf field: string token = 1
     */
    token: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class SIWEChallengeRequest$Type extends MessageType<SIWEChallengeRequest> {
    constructor() {
        super("auth.SIWEChallengeRequest", [
            { no: 1, name: "eth_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "chain_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<SIWEChallengeRequest>): SIWEChallengeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.ethAddress = "";
        if (value !== undefined)
            reflectionMergePartial<SIWEChallengeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SIWEChallengeRequest): SIWEChallengeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string eth_address */ 1:
                    message.ethAddress = reader.string();
                    break;
                case /* optional uint64 chain_id */ 2:
                    message.chainId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SIWEChallengeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string eth_address = 1; */
        if (message.ethAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.ethAddress);
        /* optional uint64 chain_id = 2; */
        if (message.chainId !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.chainId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.SIWEChallengeRequest
 */
export const SIWEChallengeRequest = new SIWEChallengeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SIWEChallengeResponse$Type extends MessageType<SIWEChallengeResponse> {
    constructor() {
        super("auth.SIWEChallengeResponse", [
            { no: 1, name: "siwe_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SIWEChallengeResponse>): SIWEChallengeResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.siweMessage = "";
        if (value !== undefined)
            reflectionMergePartial<SIWEChallengeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SIWEChallengeResponse): SIWEChallengeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string siwe_message */ 1:
                    message.siweMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SIWEChallengeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string siwe_message = 1; */
        if (message.siweMessage !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.siweMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.SIWEChallengeResponse
 */
export const SIWEChallengeResponse = new SIWEChallengeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SIWEVerifyRequest$Type extends MessageType<SIWEVerifyRequest> {
    constructor() {
        super("auth.SIWEVerifyRequest", [
            { no: 1, name: "eth_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "siwe_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "signature", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SIWEVerifyRequest>): SIWEVerifyRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.ethAddress = "";
        message.siweMessage = "";
        message.signature = "";
        if (value !== undefined)
            reflectionMergePartial<SIWEVerifyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SIWEVerifyRequest): SIWEVerifyRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string eth_address */ 1:
                    message.ethAddress = reader.string();
                    break;
                case /* string siwe_message */ 2:
                    message.siweMessage = reader.string();
                    break;
                case /* string signature */ 3:
                    message.signature = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SIWEVerifyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string eth_address = 1; */
        if (message.ethAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.ethAddress);
        /* string siwe_message = 2; */
        if (message.siweMessage !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.siweMessage);
        /* string signature = 3; */
        if (message.signature !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.signature);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.SIWEVerifyRequest
 */
export const SIWEVerifyRequest = new SIWEVerifyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SIWEVerifyResponse$Type extends MessageType<SIWEVerifyResponse> {
    constructor() {
        super("auth.SIWEVerifyResponse", [
            { no: 1, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SIWEVerifyResponse>): SIWEVerifyResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.token = "";
        if (value !== undefined)
            reflectionMergePartial<SIWEVerifyResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SIWEVerifyResponse): SIWEVerifyResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string token */ 1:
                    message.token = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SIWEVerifyResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string token = 1; */
        if (message.token !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.SIWEVerifyResponse
 */
export const SIWEVerifyResponse = new SIWEVerifyResponse$Type();
/**
 * @generated ServiceType for protobuf service auth.Auth
 */
export const Auth = new ServiceType("auth.Auth", [
    { name: "GetSIWEMessage", options: {}, I: SIWEChallengeRequest, O: SIWEChallengeResponse },
    { name: "VerifySIWE", options: {}, I: SIWEVerifyRequest, O: SIWEVerifyResponse }
]);
