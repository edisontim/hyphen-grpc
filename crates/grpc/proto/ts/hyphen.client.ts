// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "hyphen.proto" (package "hyphen", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Hyphen } from "./hyphen";
import type { ListAgentsResponse } from "./list_agents";
import type { ListAgentsRequest } from "./list_agents";
import type { GetRecentContemplationsResponse } from "./hyphen";
import type { GetRecentContemplationsRequest } from "./hyphen";
import type { GetChannelsResponse } from "./hyphen";
import type { GetChannelsRequest } from "./hyphen";
import type { UnsubscribeContemplationResponse } from "./hyphen";
import type { UnsubscribeContemplationRequest } from "./hyphen";
import type { SubscribeContemplationResponse } from "./hyphen";
import type { SubscribeContemplationRequest } from "./hyphen";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { GetUserAgentsResponse } from "./user_agents";
import type { GetUserAgentsRequest } from "./user_agents";
import type { ModifyAgentResponse } from "./modify_agent";
import type { ModifyAgentRequest } from "./modify_agent";
import type { AddTokenAddressResponse } from "./hyphen";
import type { AddTokenAddressRequest } from "./hyphen";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CreateAgentResponse } from "./create_agent";
import type { CreateAgentRequest } from "./create_agent";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service hyphen.Hyphen
 */
export interface IHyphenClient {
    /**
     * @generated from protobuf rpc: CreateAgent
     */
    createAgent(input: CreateAgentRequest, options?: RpcOptions): UnaryCall<CreateAgentRequest, CreateAgentResponse>;
    /**
     * @generated from protobuf rpc: AddTokenAddress
     */
    addTokenAddress(input: AddTokenAddressRequest, options?: RpcOptions): UnaryCall<AddTokenAddressRequest, AddTokenAddressResponse>;
    /**
     * @generated from protobuf rpc: ModifyAgent
     */
    modifyAgent(input: ModifyAgentRequest, options?: RpcOptions): UnaryCall<ModifyAgentRequest, ModifyAgentResponse>;
    /**
     * @generated from protobuf rpc: GetUserAgents
     */
    getUserAgents(input: GetUserAgentsRequest, options?: RpcOptions): UnaryCall<GetUserAgentsRequest, GetUserAgentsResponse>;
    /**
     * @generated from protobuf rpc: SubscribeContemplation
     */
    subscribeContemplation(input: SubscribeContemplationRequest, options?: RpcOptions): ServerStreamingCall<SubscribeContemplationRequest, SubscribeContemplationResponse>;
    /**
     * @generated from protobuf rpc: UnsubscribeContemplation
     */
    unsubscribeContemplation(input: UnsubscribeContemplationRequest, options?: RpcOptions): UnaryCall<UnsubscribeContemplationRequest, UnsubscribeContemplationResponse>;
    /**
     * @generated from protobuf rpc: GetChannels
     */
    getChannels(input: GetChannelsRequest, options?: RpcOptions): UnaryCall<GetChannelsRequest, GetChannelsResponse>;
    /**
     * @generated from protobuf rpc: GetRecentContemplations
     */
    getRecentContemplations(input: GetRecentContemplationsRequest, options?: RpcOptions): UnaryCall<GetRecentContemplationsRequest, GetRecentContemplationsResponse>;
    /**
     * rpc ExecuteFunction(mcp.ExecuteFunctionRequest) returns (mcp.ExecuteFunctionResponse);
     * rpc GetOpenAIEphemeralToken(mcp.GetOpenAiEphemeralTokenRequest) returns (mcp.GetOpenAiEphemeralTokenResponse);
     * rpc GetServerAccesses(mcp.GetServerAccessesRequest) returns (mcp.GetServerAccessesResponse);
     * rpc AddServerAccess(mcp.AddServerAccessRequest) returns (mcp.AddServerAccessResponse);
     *
     * @generated from protobuf rpc: ListAgents
     */
    listAgents(input: ListAgentsRequest, options?: RpcOptions): UnaryCall<ListAgentsRequest, ListAgentsResponse>;
}
/**
 * @generated from protobuf service hyphen.Hyphen
 */
export class HyphenClient implements IHyphenClient, ServiceInfo {
    typeName = Hyphen.typeName;
    methods = Hyphen.methods;
    options = Hyphen.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CreateAgent
     */
    createAgent(input: CreateAgentRequest, options?: RpcOptions): UnaryCall<CreateAgentRequest, CreateAgentResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateAgentRequest, CreateAgentResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AddTokenAddress
     */
    addTokenAddress(input: AddTokenAddressRequest, options?: RpcOptions): UnaryCall<AddTokenAddressRequest, AddTokenAddressResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<AddTokenAddressRequest, AddTokenAddressResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ModifyAgent
     */
    modifyAgent(input: ModifyAgentRequest, options?: RpcOptions): UnaryCall<ModifyAgentRequest, ModifyAgentResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<ModifyAgentRequest, ModifyAgentResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetUserAgents
     */
    getUserAgents(input: GetUserAgentsRequest, options?: RpcOptions): UnaryCall<GetUserAgentsRequest, GetUserAgentsResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetUserAgentsRequest, GetUserAgentsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SubscribeContemplation
     */
    subscribeContemplation(input: SubscribeContemplationRequest, options?: RpcOptions): ServerStreamingCall<SubscribeContemplationRequest, SubscribeContemplationResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeContemplationRequest, SubscribeContemplationResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UnsubscribeContemplation
     */
    unsubscribeContemplation(input: UnsubscribeContemplationRequest, options?: RpcOptions): UnaryCall<UnsubscribeContemplationRequest, UnsubscribeContemplationResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<UnsubscribeContemplationRequest, UnsubscribeContemplationResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetChannels
     */
    getChannels(input: GetChannelsRequest, options?: RpcOptions): UnaryCall<GetChannelsRequest, GetChannelsResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetChannelsRequest, GetChannelsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetRecentContemplations
     */
    getRecentContemplations(input: GetRecentContemplationsRequest, options?: RpcOptions): UnaryCall<GetRecentContemplationsRequest, GetRecentContemplationsResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetRecentContemplationsRequest, GetRecentContemplationsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * rpc ExecuteFunction(mcp.ExecuteFunctionRequest) returns (mcp.ExecuteFunctionResponse);
     * rpc GetOpenAIEphemeralToken(mcp.GetOpenAiEphemeralTokenRequest) returns (mcp.GetOpenAiEphemeralTokenResponse);
     * rpc GetServerAccesses(mcp.GetServerAccessesRequest) returns (mcp.GetServerAccessesResponse);
     * rpc AddServerAccess(mcp.AddServerAccessRequest) returns (mcp.AddServerAccessResponse);
     *
     * @generated from protobuf rpc: ListAgents
     */
    listAgents(input: ListAgentsRequest, options?: RpcOptions): UnaryCall<ListAgentsRequest, ListAgentsResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListAgentsRequest, ListAgentsResponse>("unary", this._transport, method, opt, input);
    }
}
