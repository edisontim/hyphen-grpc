// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "create_agent.proto" (package "create_agent", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { AgentChannel } from "./types";
import { AgentClient } from "./types";
import { AgentPersonality } from "./types";
import { AgentGeneralConfig } from "./types";
/**
 * @generated from protobuf message create_agent.CreateAgentRequest
 */
export interface CreateAgentRequest {
    /**
     * @generated from protobuf field: types.AgentGeneralConfig general_config = 1
     */
    generalConfig?: AgentGeneralConfig;
    /**
     * @generated from protobuf field: types.AgentPersonality personality = 2
     */
    personality?: AgentPersonality;
    /**
     * @generated from protobuf field: repeated types.AgentClient clients = 3
     */
    clients: AgentClient[];
    /**
     * @generated from protobuf field: repeated types.AgentChannel channels = 4
     */
    channels: AgentChannel[];
    /**
     * @generated from protobuf field: create_agent.TransferSpotHpyh transfer_spot_hyph = 5
     */
    transferSpotHyph?: TransferSpotHpyh;
    /**
     * @generated from protobuf field: string token_ticker = 6
     */
    tokenTicker: string;
}
/**
 * @generated from protobuf message create_agent.CreateAgentResponse
 */
export interface CreateAgentResponse {
    /**
     * @generated from protobuf field: int32 agent_id = 1
     */
    agentId: number;
}
/**
 * @generated from protobuf message create_agent.TransferSpotHpyh
 */
export interface TransferSpotHpyh {
    /**
     * @generated from protobuf field: string amount = 1
     */
    amount: string;
    /**
     * @generated from protobuf field: uint64 time = 2
     */
    time: bigint;
    /**
     * @generated from protobuf field: string signature = 3
     */
    signature: string;
    /**
     * @generated from protobuf field: string wallet_address = 4
     */
    walletAddress: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class CreateAgentRequest$Type extends MessageType<CreateAgentRequest> {
    constructor() {
        super("create_agent.CreateAgentRequest", [
            { no: 1, name: "general_config", kind: "message", T: () => AgentGeneralConfig },
            { no: 2, name: "personality", kind: "message", T: () => AgentPersonality },
            { no: 3, name: "clients", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => AgentClient },
            { no: 4, name: "channels", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => AgentChannel },
            { no: 5, name: "transfer_spot_hyph", kind: "message", T: () => TransferSpotHpyh },
            { no: 6, name: "token_ticker", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateAgentRequest>): CreateAgentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.clients = [];
        message.channels = [];
        message.tokenTicker = "";
        if (value !== undefined)
            reflectionMergePartial<CreateAgentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateAgentRequest): CreateAgentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* types.AgentGeneralConfig general_config */ 1:
                    message.generalConfig = AgentGeneralConfig.internalBinaryRead(reader, reader.uint32(), options, message.generalConfig);
                    break;
                case /* types.AgentPersonality personality */ 2:
                    message.personality = AgentPersonality.internalBinaryRead(reader, reader.uint32(), options, message.personality);
                    break;
                case /* repeated types.AgentClient clients */ 3:
                    message.clients.push(AgentClient.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated types.AgentChannel channels */ 4:
                    message.channels.push(AgentChannel.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* create_agent.TransferSpotHpyh transfer_spot_hyph */ 5:
                    message.transferSpotHyph = TransferSpotHpyh.internalBinaryRead(reader, reader.uint32(), options, message.transferSpotHyph);
                    break;
                case /* string token_ticker */ 6:
                    message.tokenTicker = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateAgentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* types.AgentGeneralConfig general_config = 1; */
        if (message.generalConfig)
            AgentGeneralConfig.internalBinaryWrite(message.generalConfig, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* types.AgentPersonality personality = 2; */
        if (message.personality)
            AgentPersonality.internalBinaryWrite(message.personality, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated types.AgentClient clients = 3; */
        for (let i = 0; i < message.clients.length; i++)
            AgentClient.internalBinaryWrite(message.clients[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated types.AgentChannel channels = 4; */
        for (let i = 0; i < message.channels.length; i++)
            AgentChannel.internalBinaryWrite(message.channels[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* create_agent.TransferSpotHpyh transfer_spot_hyph = 5; */
        if (message.transferSpotHyph)
            TransferSpotHpyh.internalBinaryWrite(message.transferSpotHyph, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string token_ticker = 6; */
        if (message.tokenTicker !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.tokenTicker);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message create_agent.CreateAgentRequest
 */
export const CreateAgentRequest = new CreateAgentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateAgentResponse$Type extends MessageType<CreateAgentResponse> {
    constructor() {
        super("create_agent.CreateAgentResponse", [
            { no: 1, name: "agent_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CreateAgentResponse>): CreateAgentResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.agentId = 0;
        if (value !== undefined)
            reflectionMergePartial<CreateAgentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateAgentResponse): CreateAgentResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 agent_id */ 1:
                    message.agentId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateAgentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 agent_id = 1; */
        if (message.agentId !== 0)
            writer.tag(1, WireType.Varint).int32(message.agentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message create_agent.CreateAgentResponse
 */
export const CreateAgentResponse = new CreateAgentResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransferSpotHpyh$Type extends MessageType<TransferSpotHpyh> {
    constructor() {
        super("create_agent.TransferSpotHpyh", [
            { no: 1, name: "amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "time", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "signature", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "wallet_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TransferSpotHpyh>): TransferSpotHpyh {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.amount = "";
        message.time = 0n;
        message.signature = "";
        message.walletAddress = "";
        if (value !== undefined)
            reflectionMergePartial<TransferSpotHpyh>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TransferSpotHpyh): TransferSpotHpyh {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string amount */ 1:
                    message.amount = reader.string();
                    break;
                case /* uint64 time */ 2:
                    message.time = reader.uint64().toBigInt();
                    break;
                case /* string signature */ 3:
                    message.signature = reader.string();
                    break;
                case /* string wallet_address */ 4:
                    message.walletAddress = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TransferSpotHpyh, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string amount = 1; */
        if (message.amount !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.amount);
        /* uint64 time = 2; */
        if (message.time !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.time);
        /* string signature = 3; */
        if (message.signature !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.signature);
        /* string wallet_address = 4; */
        if (message.walletAddress !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.walletAddress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message create_agent.TransferSpotHpyh
 */
export const TransferSpotHpyh = new TransferSpotHpyh$Type();
