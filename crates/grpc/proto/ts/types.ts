// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "types.proto" (package "types", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * @generated from protobuf message types.AgentGeneralConfig
 */
export interface AgentGeneralConfig {
    /**
     * @generated from protobuf field: string name = 1
     */
    name: string;
    /**
     * @generated from protobuf field: string creator = 2
     */
    creator: string;
    /**
     * @generated from protobuf field: optional string elevenlabs_api_key = 3
     */
    elevenlabsApiKey?: string;
    /**
     * @generated from protobuf field: repeated string tools = 4
     */
    tools: string[];
    /**
     * @generated from protobuf field: optional string voice_id = 5
     */
    voiceId?: string;
}
/**
 * @generated from protobuf message types.AgentPersonality
 */
export interface AgentPersonality {
    /**
     * @generated from protobuf field: string bio = 1
     */
    bio: string;
    /**
     * @generated from protobuf field: string lore = 2
     */
    lore: string;
    /**
     * @generated from protobuf field: string knowledge = 3
     */
    knowledge: string;
    /**
     * @generated from protobuf field: string adjectives = 4
     */
    adjectives: string;
    /**
     * @generated from protobuf field: string people = 5
     */
    people: string;
    /**
     * @generated from protobuf field: string topics = 6
     */
    topics: string;
    /**
     * @generated from protobuf field: string character_style = 7
     */
    characterStyle: string;
}
/**
 * @generated from protobuf message types.AgentClient
 */
export interface AgentClient {
    /**
     * @generated from protobuf field: string username = 1
     */
    username: string;
    /**
     * @generated from protobuf field: string client_type = 2
     */
    clientType: string;
    /**
     * @generated from protobuf field: string main_login_info = 3
     */
    mainLoginInfo: string;
    /**
     * @generated from protobuf field: optional string secondary_login_info = 4
     */
    secondaryLoginInfo?: string;
    /**
     * @generated from protobuf field: optional string tertiary_login_info = 5
     */
    tertiaryLoginInfo?: string;
    /**
     * @generated from protobuf field: optional string options = 6
     */
    options?: string;
}
/**
 * @generated from protobuf message types.AgentChannel
 */
export interface AgentChannel {
    /**
     * @generated from protobuf field: string channel_name = 1
     */
    channelName: string;
    /**
     * @generated from protobuf field: string channel_type = 2
     */
    channelType: string;
    /**
     * @generated from protobuf field: string main_identifier = 3
     */
    mainIdentifier: string;
    /**
     * @generated from protobuf field: optional string secondary_identifier = 4
     */
    secondaryIdentifier?: string;
    /**
     * @generated from protobuf field: bool gated = 5
     */
    gated: boolean;
}
/**
 * @generated from protobuf message types.ContemplationMessage
 */
export interface ContemplationMessage {
    /**
     * @generated from protobuf field: int32 agent_id = 1
     */
    agentId: number;
    /**
     * @generated from protobuf field: string contemplation = 2
     */
    contemplation: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 3
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: string channel_name = 4
     */
    channelName: string;
    /**
     * @generated from protobuf field: types.Type type = 5
     */
    type: Type;
    /**
     * @generated from protobuf field: string username = 6
     */
    username: string;
    /**
     * @generated from protobuf field: optional string in_response_to = 7
     */
    inResponseTo?: string;
}
/**
 * @generated from protobuf enum types.Type
 */
export enum Type {
    /**
     * @generated from protobuf enum value: START = 0;
     */
    START = 0,
    /**
     * @generated from protobuf enum value: USER_MESSAGE = 1;
     */
    USER_MESSAGE = 1,
    /**
     * @generated from protobuf enum value: CONTEMPLATION = 2;
     */
    CONTEMPLATION = 2,
    /**
     * @generated from protobuf enum value: AGENT_MESSAGE = 3;
     */
    AGENT_MESSAGE = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class AgentGeneralConfig$Type extends MessageType<AgentGeneralConfig> {
    constructor() {
        super("types.AgentGeneralConfig", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "creator", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "elevenlabs_api_key", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "tools", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "voice_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AgentGeneralConfig>): AgentGeneralConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.creator = "";
        message.tools = [];
        if (value !== undefined)
            reflectionMergePartial<AgentGeneralConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AgentGeneralConfig): AgentGeneralConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string creator */ 2:
                    message.creator = reader.string();
                    break;
                case /* optional string elevenlabs_api_key */ 3:
                    message.elevenlabsApiKey = reader.string();
                    break;
                case /* repeated string tools */ 4:
                    message.tools.push(reader.string());
                    break;
                case /* optional string voice_id */ 5:
                    message.voiceId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AgentGeneralConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string creator = 2; */
        if (message.creator !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.creator);
        /* optional string elevenlabs_api_key = 3; */
        if (message.elevenlabsApiKey !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.elevenlabsApiKey);
        /* repeated string tools = 4; */
        for (let i = 0; i < message.tools.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.tools[i]);
        /* optional string voice_id = 5; */
        if (message.voiceId !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.voiceId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message types.AgentGeneralConfig
 */
export const AgentGeneralConfig = new AgentGeneralConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AgentPersonality$Type extends MessageType<AgentPersonality> {
    constructor() {
        super("types.AgentPersonality", [
            { no: 1, name: "bio", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "lore", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "knowledge", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "adjectives", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "people", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "topics", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "character_style", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AgentPersonality>): AgentPersonality {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.bio = "";
        message.lore = "";
        message.knowledge = "";
        message.adjectives = "";
        message.people = "";
        message.topics = "";
        message.characterStyle = "";
        if (value !== undefined)
            reflectionMergePartial<AgentPersonality>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AgentPersonality): AgentPersonality {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string bio */ 1:
                    message.bio = reader.string();
                    break;
                case /* string lore */ 2:
                    message.lore = reader.string();
                    break;
                case /* string knowledge */ 3:
                    message.knowledge = reader.string();
                    break;
                case /* string adjectives */ 4:
                    message.adjectives = reader.string();
                    break;
                case /* string people */ 5:
                    message.people = reader.string();
                    break;
                case /* string topics */ 6:
                    message.topics = reader.string();
                    break;
                case /* string character_style */ 7:
                    message.characterStyle = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AgentPersonality, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string bio = 1; */
        if (message.bio !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.bio);
        /* string lore = 2; */
        if (message.lore !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.lore);
        /* string knowledge = 3; */
        if (message.knowledge !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.knowledge);
        /* string adjectives = 4; */
        if (message.adjectives !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.adjectives);
        /* string people = 5; */
        if (message.people !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.people);
        /* string topics = 6; */
        if (message.topics !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.topics);
        /* string character_style = 7; */
        if (message.characterStyle !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.characterStyle);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message types.AgentPersonality
 */
export const AgentPersonality = new AgentPersonality$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AgentClient$Type extends MessageType<AgentClient> {
    constructor() {
        super("types.AgentClient", [
            { no: 1, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "client_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "main_login_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "secondary_login_info", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "tertiary_login_info", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "options", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AgentClient>): AgentClient {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.username = "";
        message.clientType = "";
        message.mainLoginInfo = "";
        if (value !== undefined)
            reflectionMergePartial<AgentClient>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AgentClient): AgentClient {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string username */ 1:
                    message.username = reader.string();
                    break;
                case /* string client_type */ 2:
                    message.clientType = reader.string();
                    break;
                case /* string main_login_info */ 3:
                    message.mainLoginInfo = reader.string();
                    break;
                case /* optional string secondary_login_info */ 4:
                    message.secondaryLoginInfo = reader.string();
                    break;
                case /* optional string tertiary_login_info */ 5:
                    message.tertiaryLoginInfo = reader.string();
                    break;
                case /* optional string options */ 6:
                    message.options = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AgentClient, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string username = 1; */
        if (message.username !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.username);
        /* string client_type = 2; */
        if (message.clientType !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.clientType);
        /* string main_login_info = 3; */
        if (message.mainLoginInfo !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.mainLoginInfo);
        /* optional string secondary_login_info = 4; */
        if (message.secondaryLoginInfo !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.secondaryLoginInfo);
        /* optional string tertiary_login_info = 5; */
        if (message.tertiaryLoginInfo !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.tertiaryLoginInfo);
        /* optional string options = 6; */
        if (message.options !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.options);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message types.AgentClient
 */
export const AgentClient = new AgentClient$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AgentChannel$Type extends MessageType<AgentChannel> {
    constructor() {
        super("types.AgentChannel", [
            { no: 1, name: "channel_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "channel_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "main_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "secondary_identifier", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "gated", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<AgentChannel>): AgentChannel {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.channelName = "";
        message.channelType = "";
        message.mainIdentifier = "";
        message.gated = false;
        if (value !== undefined)
            reflectionMergePartial<AgentChannel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AgentChannel): AgentChannel {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string channel_name */ 1:
                    message.channelName = reader.string();
                    break;
                case /* string channel_type */ 2:
                    message.channelType = reader.string();
                    break;
                case /* string main_identifier */ 3:
                    message.mainIdentifier = reader.string();
                    break;
                case /* optional string secondary_identifier */ 4:
                    message.secondaryIdentifier = reader.string();
                    break;
                case /* bool gated */ 5:
                    message.gated = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AgentChannel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string channel_name = 1; */
        if (message.channelName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.channelName);
        /* string channel_type = 2; */
        if (message.channelType !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.channelType);
        /* string main_identifier = 3; */
        if (message.mainIdentifier !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.mainIdentifier);
        /* optional string secondary_identifier = 4; */
        if (message.secondaryIdentifier !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.secondaryIdentifier);
        /* bool gated = 5; */
        if (message.gated !== false)
            writer.tag(5, WireType.Varint).bool(message.gated);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message types.AgentChannel
 */
export const AgentChannel = new AgentChannel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContemplationMessage$Type extends MessageType<ContemplationMessage> {
    constructor() {
        super("types.ContemplationMessage", [
            { no: 1, name: "agent_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "contemplation", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "channel_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "type", kind: "enum", T: () => ["types.Type", Type] },
            { no: 6, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "in_response_to", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ContemplationMessage>): ContemplationMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.agentId = 0;
        message.contemplation = "";
        message.channelName = "";
        message.type = 0;
        message.username = "";
        if (value !== undefined)
            reflectionMergePartial<ContemplationMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContemplationMessage): ContemplationMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 agent_id */ 1:
                    message.agentId = reader.int32();
                    break;
                case /* string contemplation */ 2:
                    message.contemplation = reader.string();
                    break;
                case /* google.protobuf.Timestamp created_at */ 3:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* string channel_name */ 4:
                    message.channelName = reader.string();
                    break;
                case /* types.Type type */ 5:
                    message.type = reader.int32();
                    break;
                case /* string username */ 6:
                    message.username = reader.string();
                    break;
                case /* optional string in_response_to */ 7:
                    message.inResponseTo = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContemplationMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 agent_id = 1; */
        if (message.agentId !== 0)
            writer.tag(1, WireType.Varint).int32(message.agentId);
        /* string contemplation = 2; */
        if (message.contemplation !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contemplation);
        /* google.protobuf.Timestamp created_at = 3; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string channel_name = 4; */
        if (message.channelName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.channelName);
        /* types.Type type = 5; */
        if (message.type !== 0)
            writer.tag(5, WireType.Varint).int32(message.type);
        /* string username = 6; */
        if (message.username !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.username);
        /* optional string in_response_to = 7; */
        if (message.inResponseTo !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.inResponseTo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message types.ContemplationMessage
 */
export const ContemplationMessage = new ContemplationMessage$Type();
