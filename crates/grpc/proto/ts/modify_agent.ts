// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "modify_agent.proto" (package "modify_agent", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { AgentPersonality } from "./types";
/**
 * @generated from protobuf message modify_agent.ModifyAgentRequest
 */
export interface ModifyAgentRequest {
    /**
     * @generated from protobuf field: modify_agent.ModifyAgentGeneralConfig general_config = 1
     */
    generalConfig?: ModifyAgentGeneralConfig;
    /**
     * @generated from protobuf field: types.AgentPersonality personality = 2
     */
    personality?: AgentPersonality;
    /**
     * @generated from protobuf field: string signature = 3
     */
    signature: string;
}
/**
 * @generated from protobuf message modify_agent.ModifyAgentResponse
 */
export interface ModifyAgentResponse {
    /**
     * @generated from protobuf field: int32 agent_id = 1
     */
    agentId: number;
}
/**
 * @generated from protobuf message modify_agent.ModifyAgentGeneralConfig
 */
export interface ModifyAgentGeneralConfig {
    /**
     * @generated from protobuf field: int32 id = 1
     */
    id: number;
    /**
     * @generated from protobuf field: repeated string tools = 2
     */
    tools: string[];
    /**
     * @generated from protobuf field: optional string elevenlabs_api_key = 3
     */
    elevenlabsApiKey?: string;
    /**
     * @generated from protobuf field: optional string voice_id = 4
     */
    voiceId?: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class ModifyAgentRequest$Type extends MessageType<ModifyAgentRequest> {
    constructor() {
        super("modify_agent.ModifyAgentRequest", [
            { no: 1, name: "general_config", kind: "message", T: () => ModifyAgentGeneralConfig },
            { no: 2, name: "personality", kind: "message", T: () => AgentPersonality },
            { no: 3, name: "signature", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ModifyAgentRequest>): ModifyAgentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.signature = "";
        if (value !== undefined)
            reflectionMergePartial<ModifyAgentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ModifyAgentRequest): ModifyAgentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* modify_agent.ModifyAgentGeneralConfig general_config */ 1:
                    message.generalConfig = ModifyAgentGeneralConfig.internalBinaryRead(reader, reader.uint32(), options, message.generalConfig);
                    break;
                case /* types.AgentPersonality personality */ 2:
                    message.personality = AgentPersonality.internalBinaryRead(reader, reader.uint32(), options, message.personality);
                    break;
                case /* string signature */ 3:
                    message.signature = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ModifyAgentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* modify_agent.ModifyAgentGeneralConfig general_config = 1; */
        if (message.generalConfig)
            ModifyAgentGeneralConfig.internalBinaryWrite(message.generalConfig, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* types.AgentPersonality personality = 2; */
        if (message.personality)
            AgentPersonality.internalBinaryWrite(message.personality, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string signature = 3; */
        if (message.signature !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.signature);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message modify_agent.ModifyAgentRequest
 */
export const ModifyAgentRequest = new ModifyAgentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ModifyAgentResponse$Type extends MessageType<ModifyAgentResponse> {
    constructor() {
        super("modify_agent.ModifyAgentResponse", [
            { no: 1, name: "agent_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ModifyAgentResponse>): ModifyAgentResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.agentId = 0;
        if (value !== undefined)
            reflectionMergePartial<ModifyAgentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ModifyAgentResponse): ModifyAgentResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 agent_id */ 1:
                    message.agentId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ModifyAgentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 agent_id = 1; */
        if (message.agentId !== 0)
            writer.tag(1, WireType.Varint).int32(message.agentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message modify_agent.ModifyAgentResponse
 */
export const ModifyAgentResponse = new ModifyAgentResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ModifyAgentGeneralConfig$Type extends MessageType<ModifyAgentGeneralConfig> {
    constructor() {
        super("modify_agent.ModifyAgentGeneralConfig", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "tools", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "elevenlabs_api_key", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "voice_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ModifyAgentGeneralConfig>): ModifyAgentGeneralConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.tools = [];
        if (value !== undefined)
            reflectionMergePartial<ModifyAgentGeneralConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ModifyAgentGeneralConfig): ModifyAgentGeneralConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* repeated string tools */ 2:
                    message.tools.push(reader.string());
                    break;
                case /* optional string elevenlabs_api_key */ 3:
                    message.elevenlabsApiKey = reader.string();
                    break;
                case /* optional string voice_id */ 4:
                    message.voiceId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ModifyAgentGeneralConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* repeated string tools = 2; */
        for (let i = 0; i < message.tools.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.tools[i]);
        /* optional string elevenlabs_api_key = 3; */
        if (message.elevenlabsApiKey !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.elevenlabsApiKey);
        /* optional string voice_id = 4; */
        if (message.voiceId !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.voiceId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message modify_agent.ModifyAgentGeneralConfig
 */
export const ModifyAgentGeneralConfig = new ModifyAgentGeneralConfig$Type();
