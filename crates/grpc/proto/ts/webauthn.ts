// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "webauthn.proto" (package "webauthn", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Request to start WebAuthn registration process
 *
 * @generated from protobuf message webauthn.WebAuthnRegistrationStartRequest
 */
export interface WebAuthnRegistrationStartRequest {
    /**
     * @generated from protobuf field: string username = 1
     */
    username: string;
    /**
     * @generated from protobuf field: string display_name = 2
     */
    displayName: string;
    /**
     * Optional existing auth information
     *
     * @generated from protobuf field: optional string signature = 3
     */
    signature?: string;
    /**
     * @generated from protobuf field: optional uint64 nonce = 4
     */
    nonce?: bigint;
}
/**
 * Response containing challenge for registration
 *
 * @generated from protobuf message webauthn.WebAuthnRegistrationStartResponse
 */
export interface WebAuthnRegistrationStartResponse {
    /**
     * @generated from protobuf field: string challenge = 1
     */
    challenge: string;
    /**
     * @generated from protobuf field: string session_id = 2
     */
    sessionId: string;
    /**
     * @generated from protobuf field: bytes public_key_credential_creation_options = 3
     */
    publicKeyCredentialCreationOptions: Uint8Array;
}
/**
 * Request to finish WebAuthn registration with the signed credential
 *
 * @generated from protobuf message webauthn.WebAuthnRegistrationFinishRequest
 */
export interface WebAuthnRegistrationFinishRequest {
    /**
     * @generated from protobuf field: string session_id = 1
     */
    sessionId: string;
    /**
     * @generated from protobuf field: bytes credential = 2
     */
    credential: Uint8Array;
}
/**
 * Response after registration completion
 *
 * @generated from protobuf message webauthn.WebAuthnRegistrationFinishResponse
 */
export interface WebAuthnRegistrationFinishResponse {
    /**
     * @generated from protobuf field: bool success = 1
     */
    success: boolean;
    /**
     * @generated from protobuf field: string user_id = 2
     */
    userId: string;
}
/**
 * Request to start WebAuthn authentication process
 *
 * @generated from protobuf message webauthn.WebAuthnAuthenticationStartRequest
 */
export interface WebAuthnAuthenticationStartRequest {
    /**
     * @generated from protobuf field: string username = 1
     */
    username: string;
}
/**
 * Response containing challenge for authentication
 *
 * @generated from protobuf message webauthn.WebAuthnAuthenticationStartResponse
 */
export interface WebAuthnAuthenticationStartResponse {
    /**
     * @generated from protobuf field: string challenge = 1
     */
    challenge: string;
    /**
     * @generated from protobuf field: string session_id = 2
     */
    sessionId: string;
    /**
     * @generated from protobuf field: bytes public_key_credential_request_options = 3
     */
    publicKeyCredentialRequestOptions: Uint8Array;
}
/**
 * Request to finish WebAuthn authentication with the signed credential
 *
 * @generated from protobuf message webauthn.WebAuthnAuthenticationFinishRequest
 */
export interface WebAuthnAuthenticationFinishRequest {
    /**
     * @generated from protobuf field: string session_id = 1
     */
    sessionId: string;
    /**
     * @generated from protobuf field: bytes credential = 2
     */
    credential: Uint8Array;
}
/**
 * Response after authentication completion
 *
 * @generated from protobuf message webauthn.WebAuthnAuthenticationFinishResponse
 */
export interface WebAuthnAuthenticationFinishResponse {
    /**
     * @generated from protobuf field: bool success = 1
     */
    success: boolean;
    /**
     * @generated from protobuf field: string user_id = 2
     */
    userId: string;
    /**
     * @generated from protobuf field: uint64 auth_nonce = 3
     */
    authNonce: bigint;
    /**
     * @generated from protobuf field: string auth_signature = 4
     */
    authSignature: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class WebAuthnRegistrationStartRequest$Type extends MessageType<WebAuthnRegistrationStartRequest> {
    constructor() {
        super("webauthn.WebAuthnRegistrationStartRequest", [
            { no: 1, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "display_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "signature", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "nonce", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<WebAuthnRegistrationStartRequest>): WebAuthnRegistrationStartRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.username = "";
        message.displayName = "";
        if (value !== undefined)
            reflectionMergePartial<WebAuthnRegistrationStartRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebAuthnRegistrationStartRequest): WebAuthnRegistrationStartRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string username */ 1:
                    message.username = reader.string();
                    break;
                case /* string display_name */ 2:
                    message.displayName = reader.string();
                    break;
                case /* optional string signature */ 3:
                    message.signature = reader.string();
                    break;
                case /* optional uint64 nonce */ 4:
                    message.nonce = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebAuthnRegistrationStartRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string username = 1; */
        if (message.username !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.username);
        /* string display_name = 2; */
        if (message.displayName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.displayName);
        /* optional string signature = 3; */
        if (message.signature !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.signature);
        /* optional uint64 nonce = 4; */
        if (message.nonce !== undefined)
            writer.tag(4, WireType.Varint).uint64(message.nonce);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message webauthn.WebAuthnRegistrationStartRequest
 */
export const WebAuthnRegistrationStartRequest = new WebAuthnRegistrationStartRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebAuthnRegistrationStartResponse$Type extends MessageType<WebAuthnRegistrationStartResponse> {
    constructor() {
        super("webauthn.WebAuthnRegistrationStartResponse", [
            { no: 1, name: "challenge", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "public_key_credential_creation_options", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<WebAuthnRegistrationStartResponse>): WebAuthnRegistrationStartResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.challenge = "";
        message.sessionId = "";
        message.publicKeyCredentialCreationOptions = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<WebAuthnRegistrationStartResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebAuthnRegistrationStartResponse): WebAuthnRegistrationStartResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string challenge */ 1:
                    message.challenge = reader.string();
                    break;
                case /* string session_id */ 2:
                    message.sessionId = reader.string();
                    break;
                case /* bytes public_key_credential_creation_options */ 3:
                    message.publicKeyCredentialCreationOptions = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebAuthnRegistrationStartResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string challenge = 1; */
        if (message.challenge !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.challenge);
        /* string session_id = 2; */
        if (message.sessionId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sessionId);
        /* bytes public_key_credential_creation_options = 3; */
        if (message.publicKeyCredentialCreationOptions.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.publicKeyCredentialCreationOptions);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message webauthn.WebAuthnRegistrationStartResponse
 */
export const WebAuthnRegistrationStartResponse = new WebAuthnRegistrationStartResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebAuthnRegistrationFinishRequest$Type extends MessageType<WebAuthnRegistrationFinishRequest> {
    constructor() {
        super("webauthn.WebAuthnRegistrationFinishRequest", [
            { no: 1, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "credential", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<WebAuthnRegistrationFinishRequest>): WebAuthnRegistrationFinishRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sessionId = "";
        message.credential = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<WebAuthnRegistrationFinishRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebAuthnRegistrationFinishRequest): WebAuthnRegistrationFinishRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string session_id */ 1:
                    message.sessionId = reader.string();
                    break;
                case /* bytes credential */ 2:
                    message.credential = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebAuthnRegistrationFinishRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string session_id = 1; */
        if (message.sessionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sessionId);
        /* bytes credential = 2; */
        if (message.credential.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.credential);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message webauthn.WebAuthnRegistrationFinishRequest
 */
export const WebAuthnRegistrationFinishRequest = new WebAuthnRegistrationFinishRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebAuthnRegistrationFinishResponse$Type extends MessageType<WebAuthnRegistrationFinishResponse> {
    constructor() {
        super("webauthn.WebAuthnRegistrationFinishResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WebAuthnRegistrationFinishResponse>): WebAuthnRegistrationFinishResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        message.userId = "";
        if (value !== undefined)
            reflectionMergePartial<WebAuthnRegistrationFinishResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebAuthnRegistrationFinishResponse): WebAuthnRegistrationFinishResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebAuthnRegistrationFinishResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message webauthn.WebAuthnRegistrationFinishResponse
 */
export const WebAuthnRegistrationFinishResponse = new WebAuthnRegistrationFinishResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebAuthnAuthenticationStartRequest$Type extends MessageType<WebAuthnAuthenticationStartRequest> {
    constructor() {
        super("webauthn.WebAuthnAuthenticationStartRequest", [
            { no: 1, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WebAuthnAuthenticationStartRequest>): WebAuthnAuthenticationStartRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.username = "";
        if (value !== undefined)
            reflectionMergePartial<WebAuthnAuthenticationStartRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebAuthnAuthenticationStartRequest): WebAuthnAuthenticationStartRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string username */ 1:
                    message.username = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebAuthnAuthenticationStartRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string username = 1; */
        if (message.username !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.username);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message webauthn.WebAuthnAuthenticationStartRequest
 */
export const WebAuthnAuthenticationStartRequest = new WebAuthnAuthenticationStartRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebAuthnAuthenticationStartResponse$Type extends MessageType<WebAuthnAuthenticationStartResponse> {
    constructor() {
        super("webauthn.WebAuthnAuthenticationStartResponse", [
            { no: 1, name: "challenge", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "public_key_credential_request_options", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<WebAuthnAuthenticationStartResponse>): WebAuthnAuthenticationStartResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.challenge = "";
        message.sessionId = "";
        message.publicKeyCredentialRequestOptions = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<WebAuthnAuthenticationStartResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebAuthnAuthenticationStartResponse): WebAuthnAuthenticationStartResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string challenge */ 1:
                    message.challenge = reader.string();
                    break;
                case /* string session_id */ 2:
                    message.sessionId = reader.string();
                    break;
                case /* bytes public_key_credential_request_options */ 3:
                    message.publicKeyCredentialRequestOptions = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebAuthnAuthenticationStartResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string challenge = 1; */
        if (message.challenge !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.challenge);
        /* string session_id = 2; */
        if (message.sessionId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sessionId);
        /* bytes public_key_credential_request_options = 3; */
        if (message.publicKeyCredentialRequestOptions.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.publicKeyCredentialRequestOptions);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message webauthn.WebAuthnAuthenticationStartResponse
 */
export const WebAuthnAuthenticationStartResponse = new WebAuthnAuthenticationStartResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebAuthnAuthenticationFinishRequest$Type extends MessageType<WebAuthnAuthenticationFinishRequest> {
    constructor() {
        super("webauthn.WebAuthnAuthenticationFinishRequest", [
            { no: 1, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "credential", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<WebAuthnAuthenticationFinishRequest>): WebAuthnAuthenticationFinishRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sessionId = "";
        message.credential = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<WebAuthnAuthenticationFinishRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebAuthnAuthenticationFinishRequest): WebAuthnAuthenticationFinishRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string session_id */ 1:
                    message.sessionId = reader.string();
                    break;
                case /* bytes credential */ 2:
                    message.credential = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebAuthnAuthenticationFinishRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string session_id = 1; */
        if (message.sessionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sessionId);
        /* bytes credential = 2; */
        if (message.credential.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.credential);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message webauthn.WebAuthnAuthenticationFinishRequest
 */
export const WebAuthnAuthenticationFinishRequest = new WebAuthnAuthenticationFinishRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebAuthnAuthenticationFinishResponse$Type extends MessageType<WebAuthnAuthenticationFinishResponse> {
    constructor() {
        super("webauthn.WebAuthnAuthenticationFinishResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "auth_nonce", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "auth_signature", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WebAuthnAuthenticationFinishResponse>): WebAuthnAuthenticationFinishResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        message.userId = "";
        message.authNonce = 0n;
        message.authSignature = "";
        if (value !== undefined)
            reflectionMergePartial<WebAuthnAuthenticationFinishResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebAuthnAuthenticationFinishResponse): WebAuthnAuthenticationFinishResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                case /* uint64 auth_nonce */ 3:
                    message.authNonce = reader.uint64().toBigInt();
                    break;
                case /* string auth_signature */ 4:
                    message.authSignature = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebAuthnAuthenticationFinishResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        /* uint64 auth_nonce = 3; */
        if (message.authNonce !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.authNonce);
        /* string auth_signature = 4; */
        if (message.authSignature !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.authSignature);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message webauthn.WebAuthnAuthenticationFinishResponse
 */
export const WebAuthnAuthenticationFinishResponse = new WebAuthnAuthenticationFinishResponse$Type();
/**
 * @generated ServiceType for protobuf service webauthn.WebAuthnService
 */
export const WebAuthnService = new ServiceType("webauthn.WebAuthnService", [
    { name: "StartRegistration", options: {}, I: WebAuthnRegistrationStartRequest, O: WebAuthnRegistrationStartResponse },
    { name: "FinishRegistration", options: {}, I: WebAuthnRegistrationFinishRequest, O: WebAuthnRegistrationFinishResponse },
    { name: "StartAuthentication", options: {}, I: WebAuthnAuthenticationStartRequest, O: WebAuthnAuthenticationStartResponse },
    { name: "FinishAuthentication", options: {}, I: WebAuthnAuthenticationFinishRequest, O: WebAuthnAuthenticationFinishResponse }
]);
