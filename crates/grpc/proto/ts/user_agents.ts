// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "user_agents.proto" (package "user_agents", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
import { AgentPersonality } from "./types";
/**
 * @generated from protobuf message user_agents.UserAgent
 */
export interface UserAgent {
    /**
     * @generated from protobuf field: user_agents.UserAgentGeneralConfig general_config = 1
     */
    generalConfig?: UserAgentGeneralConfig;
    /**
     * @generated from protobuf field: types.AgentPersonality personality = 2
     */
    personality?: AgentPersonality;
}
/**
 * @generated from protobuf message user_agents.UserAgentGeneralConfig
 */
export interface UserAgentGeneralConfig {
    /**
     * @generated from protobuf field: int32 id = 1
     */
    id: number;
    /**
     * @generated from protobuf field: string name = 2
     */
    name: string;
    /**
     * @generated from protobuf field: string creator = 3
     */
    creator: string;
    /**
     * @generated from protobuf field: repeated string tools = 4
     */
    tools: string[];
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 5
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp updated_at = 6
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: bool enabled = 7
     */
    enabled: boolean;
    /**
     * @generated from protobuf field: user_agents.CreationStatus creation_status = 8
     */
    creationStatus: CreationStatus;
    /**
     * @generated from protobuf field: optional string token_address = 9
     */
    tokenAddress?: string;
    /**
     * @generated from protobuf field: string token_ticker = 10
     */
    tokenTicker: string;
    /**
     * @generated from protobuf field: repeated user_agents.Channel channels = 11
     */
    channels: Channel[];
}
/**
 * @generated from protobuf message user_agents.GetUserAgentsRequest
 */
export interface GetUserAgentsRequest {
    /**
     * @generated from protobuf field: string creator = 1
     */
    creator: string;
}
/**
 * @generated from protobuf message user_agents.GetUserAgentsResponse
 */
export interface GetUserAgentsResponse {
    /**
     * @generated from protobuf field: repeated user_agents.UserAgent agents = 1
     */
    agents: UserAgent[];
}
/**
 * @generated from protobuf message user_agents.Channel
 */
export interface Channel {
    /**
     * @generated from protobuf field: string channel_type = 1
     */
    channelType: string;
    /**
     * @generated from protobuf field: string channel_name = 2
     */
    channelName: string;
    /**
     * @generated from protobuf field: string main_identifier = 3
     */
    mainIdentifier: string;
    /**
     * @generated from protobuf field: optional string secondary_identifier = 4
     */
    secondaryIdentifier?: string;
}
/**
 * @generated from protobuf enum user_agents.CreationStatus
 */
export enum CreationStatus {
    /**
     * @generated from protobuf enum value: WAITING_FOR_TOKEN_ADDRESS = 0;
     */
    WAITING_FOR_TOKEN_ADDRESS = 0,
    /**
     * @generated from protobuf enum value: WAITING_FOR_HYPURR_LAUNCH = 1;
     */
    WAITING_FOR_HYPURR_LAUNCH = 1,
    /**
     * @generated from protobuf enum value: WAITING_FOR_HPYH_PAYMENT = 2;
     */
    WAITING_FOR_HPYH_PAYMENT = 2,
    /**
     * @generated from protobuf enum value: CREATED = 3;
     */
    CREATED = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class UserAgent$Type extends MessageType<UserAgent> {
    constructor() {
        super("user_agents.UserAgent", [
            { no: 1, name: "general_config", kind: "message", T: () => UserAgentGeneralConfig },
            { no: 2, name: "personality", kind: "message", T: () => AgentPersonality }
        ]);
    }
    create(value?: PartialMessage<UserAgent>): UserAgent {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UserAgent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserAgent): UserAgent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* user_agents.UserAgentGeneralConfig general_config */ 1:
                    message.generalConfig = UserAgentGeneralConfig.internalBinaryRead(reader, reader.uint32(), options, message.generalConfig);
                    break;
                case /* types.AgentPersonality personality */ 2:
                    message.personality = AgentPersonality.internalBinaryRead(reader, reader.uint32(), options, message.personality);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserAgent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* user_agents.UserAgentGeneralConfig general_config = 1; */
        if (message.generalConfig)
            UserAgentGeneralConfig.internalBinaryWrite(message.generalConfig, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* types.AgentPersonality personality = 2; */
        if (message.personality)
            AgentPersonality.internalBinaryWrite(message.personality, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_agents.UserAgent
 */
export const UserAgent = new UserAgent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserAgentGeneralConfig$Type extends MessageType<UserAgentGeneralConfig> {
    constructor() {
        super("user_agents.UserAgentGeneralConfig", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "creator", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "tools", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 6, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 7, name: "enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "creation_status", kind: "enum", T: () => ["user_agents.CreationStatus", CreationStatus] },
            { no: 9, name: "token_address", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "token_ticker", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "channels", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Channel }
        ]);
    }
    create(value?: PartialMessage<UserAgentGeneralConfig>): UserAgentGeneralConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.name = "";
        message.creator = "";
        message.tools = [];
        message.enabled = false;
        message.creationStatus = 0;
        message.tokenTicker = "";
        message.channels = [];
        if (value !== undefined)
            reflectionMergePartial<UserAgentGeneralConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserAgentGeneralConfig): UserAgentGeneralConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string creator */ 3:
                    message.creator = reader.string();
                    break;
                case /* repeated string tools */ 4:
                    message.tools.push(reader.string());
                    break;
                case /* google.protobuf.Timestamp created_at */ 5:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp updated_at */ 6:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* bool enabled */ 7:
                    message.enabled = reader.bool();
                    break;
                case /* user_agents.CreationStatus creation_status */ 8:
                    message.creationStatus = reader.int32();
                    break;
                case /* optional string token_address */ 9:
                    message.tokenAddress = reader.string();
                    break;
                case /* string token_ticker */ 10:
                    message.tokenTicker = reader.string();
                    break;
                case /* repeated user_agents.Channel channels */ 11:
                    message.channels.push(Channel.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserAgentGeneralConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string creator = 3; */
        if (message.creator !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.creator);
        /* repeated string tools = 4; */
        for (let i = 0; i < message.tools.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.tools[i]);
        /* google.protobuf.Timestamp created_at = 5; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp updated_at = 6; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bool enabled = 7; */
        if (message.enabled !== false)
            writer.tag(7, WireType.Varint).bool(message.enabled);
        /* user_agents.CreationStatus creation_status = 8; */
        if (message.creationStatus !== 0)
            writer.tag(8, WireType.Varint).int32(message.creationStatus);
        /* optional string token_address = 9; */
        if (message.tokenAddress !== undefined)
            writer.tag(9, WireType.LengthDelimited).string(message.tokenAddress);
        /* string token_ticker = 10; */
        if (message.tokenTicker !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.tokenTicker);
        /* repeated user_agents.Channel channels = 11; */
        for (let i = 0; i < message.channels.length; i++)
            Channel.internalBinaryWrite(message.channels[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_agents.UserAgentGeneralConfig
 */
export const UserAgentGeneralConfig = new UserAgentGeneralConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUserAgentsRequest$Type extends MessageType<GetUserAgentsRequest> {
    constructor() {
        super("user_agents.GetUserAgentsRequest", [
            { no: 1, name: "creator", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetUserAgentsRequest>): GetUserAgentsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.creator = "";
        if (value !== undefined)
            reflectionMergePartial<GetUserAgentsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUserAgentsRequest): GetUserAgentsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string creator */ 1:
                    message.creator = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUserAgentsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string creator = 1; */
        if (message.creator !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.creator);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_agents.GetUserAgentsRequest
 */
export const GetUserAgentsRequest = new GetUserAgentsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUserAgentsResponse$Type extends MessageType<GetUserAgentsResponse> {
    constructor() {
        super("user_agents.GetUserAgentsResponse", [
            { no: 1, name: "agents", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => UserAgent }
        ]);
    }
    create(value?: PartialMessage<GetUserAgentsResponse>): GetUserAgentsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.agents = [];
        if (value !== undefined)
            reflectionMergePartial<GetUserAgentsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUserAgentsResponse): GetUserAgentsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated user_agents.UserAgent agents */ 1:
                    message.agents.push(UserAgent.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUserAgentsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated user_agents.UserAgent agents = 1; */
        for (let i = 0; i < message.agents.length; i++)
            UserAgent.internalBinaryWrite(message.agents[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_agents.GetUserAgentsResponse
 */
export const GetUserAgentsResponse = new GetUserAgentsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Channel$Type extends MessageType<Channel> {
    constructor() {
        super("user_agents.Channel", [
            { no: 1, name: "channel_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "channel_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "main_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "secondary_identifier", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Channel>): Channel {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.channelType = "";
        message.channelName = "";
        message.mainIdentifier = "";
        if (value !== undefined)
            reflectionMergePartial<Channel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Channel): Channel {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string channel_type */ 1:
                    message.channelType = reader.string();
                    break;
                case /* string channel_name */ 2:
                    message.channelName = reader.string();
                    break;
                case /* string main_identifier */ 3:
                    message.mainIdentifier = reader.string();
                    break;
                case /* optional string secondary_identifier */ 4:
                    message.secondaryIdentifier = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Channel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string channel_type = 1; */
        if (message.channelType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.channelType);
        /* string channel_name = 2; */
        if (message.channelName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.channelName);
        /* string main_identifier = 3; */
        if (message.mainIdentifier !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.mainIdentifier);
        /* optional string secondary_identifier = 4; */
        if (message.secondaryIdentifier !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.secondaryIdentifier);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_agents.Channel
 */
export const Channel = new Channel$Type();
