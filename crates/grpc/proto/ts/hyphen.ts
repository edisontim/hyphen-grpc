// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "hyphen.proto" (package "hyphen", syntax proto3)
// tslint:disable
import { ListAgentsResponse } from "./list_agents";
import { ListAgentsRequest } from "./list_agents";
import { GetUserAgentsResponse } from "./user_agents";
import { GetUserAgentsRequest } from "./user_agents";
import { ModifyAgentResponse } from "./modify_agent";
import { ModifyAgentRequest } from "./modify_agent";
import { CreateAgentResponse } from "./create_agent";
import { CreateAgentRequest } from "./create_agent";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ContemplationMessage } from "./types";
/**
 * @generated from protobuf message hyphen.AddTokenAddressRequest
 */
export interface AddTokenAddressRequest {
    /**
     * @generated from protobuf field: string token_address = 1
     */
    tokenAddress: string;
    /**
     * @generated from protobuf field: int32 agent_id = 2
     */
    agentId: number;
}
/**
 * @generated from protobuf message hyphen.AddTokenAddressResponse
 */
export interface AddTokenAddressResponse {
    /**
     * @generated from protobuf field: bool success = 1
     */
    success: boolean;
}
/**
 * @generated from protobuf message hyphen.UnsubscribeContemplationRequest
 */
export interface UnsubscribeContemplationRequest {
    /**
     * @generated from protobuf field: int32 agent_id = 1
     */
    agentId: number;
    /**
     * @generated from protobuf field: string subscription_id = 2
     */
    subscriptionId: string;
}
/**
 * @generated from protobuf message hyphen.UnsubscribeContemplationResponse
 */
export interface UnsubscribeContemplationResponse {
    /**
     * @generated from protobuf field: bool success = 1
     */
    success: boolean;
}
/**
 * @generated from protobuf message hyphen.GetChannelsRequest
 */
export interface GetChannelsRequest {
    /**
     * @generated from protobuf field: int32 agent_id = 1
     */
    agentId: number;
}
/**
 * @generated from protobuf message hyphen.GetChannelsResponse
 */
export interface GetChannelsResponse {
    /**
     * @generated from protobuf field: repeated string channels = 1
     */
    channels: string[];
}
/**
 * @generated from protobuf message hyphen.GetRecentContemplationsRequest
 */
export interface GetRecentContemplationsRequest {
    /**
     * @generated from protobuf field: int32 agent_id = 1
     */
    agentId: number;
    /**
     * @generated from protobuf field: string channel_id = 2
     */
    channelId: string;
    /**
     * @generated from protobuf field: string channel_name = 3
     */
    channelName: string;
    /**
     * @generated from protobuf field: string agent_name = 4
     */
    agentName: string;
    /**
     * @generated from protobuf field: int32 limit = 5
     */
    limit: number;
}
/**
 * @generated from protobuf message hyphen.GetRecentContemplationsResponse
 */
export interface GetRecentContemplationsResponse {
    /**
     * @generated from protobuf field: repeated types.ContemplationMessage messages = 1
     */
    messages: ContemplationMessage[];
}
/**
 * @generated from protobuf message hyphen.SubscribeContemplationRequest
 */
export interface SubscribeContemplationRequest {
    /**
     * @generated from protobuf field: int32 agent_id = 1
     */
    agentId: number;
}
/**
 * @generated from protobuf message hyphen.SubscribeContemplationResponse
 */
export interface SubscribeContemplationResponse {
    /**
     * @generated from protobuf field: types.ContemplationMessage contemplation = 1
     */
    contemplation?: ContemplationMessage;
    /**
     * @generated from protobuf field: optional string subscription_id = 2
     */
    subscriptionId?: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class AddTokenAddressRequest$Type extends MessageType<AddTokenAddressRequest> {
    constructor() {
        super("hyphen.AddTokenAddressRequest", [
            { no: 1, name: "token_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "agent_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<AddTokenAddressRequest>): AddTokenAddressRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tokenAddress = "";
        message.agentId = 0;
        if (value !== undefined)
            reflectionMergePartial<AddTokenAddressRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddTokenAddressRequest): AddTokenAddressRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string token_address */ 1:
                    message.tokenAddress = reader.string();
                    break;
                case /* int32 agent_id */ 2:
                    message.agentId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddTokenAddressRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string token_address = 1; */
        if (message.tokenAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.tokenAddress);
        /* int32 agent_id = 2; */
        if (message.agentId !== 0)
            writer.tag(2, WireType.Varint).int32(message.agentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hyphen.AddTokenAddressRequest
 */
export const AddTokenAddressRequest = new AddTokenAddressRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddTokenAddressResponse$Type extends MessageType<AddTokenAddressResponse> {
    constructor() {
        super("hyphen.AddTokenAddressResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<AddTokenAddressResponse>): AddTokenAddressResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        if (value !== undefined)
            reflectionMergePartial<AddTokenAddressResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddTokenAddressResponse): AddTokenAddressResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddTokenAddressResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hyphen.AddTokenAddressResponse
 */
export const AddTokenAddressResponse = new AddTokenAddressResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnsubscribeContemplationRequest$Type extends MessageType<UnsubscribeContemplationRequest> {
    constructor() {
        super("hyphen.UnsubscribeContemplationRequest", [
            { no: 1, name: "agent_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "subscription_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UnsubscribeContemplationRequest>): UnsubscribeContemplationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.agentId = 0;
        message.subscriptionId = "";
        if (value !== undefined)
            reflectionMergePartial<UnsubscribeContemplationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnsubscribeContemplationRequest): UnsubscribeContemplationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 agent_id */ 1:
                    message.agentId = reader.int32();
                    break;
                case /* string subscription_id */ 2:
                    message.subscriptionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnsubscribeContemplationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 agent_id = 1; */
        if (message.agentId !== 0)
            writer.tag(1, WireType.Varint).int32(message.agentId);
        /* string subscription_id = 2; */
        if (message.subscriptionId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.subscriptionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hyphen.UnsubscribeContemplationRequest
 */
export const UnsubscribeContemplationRequest = new UnsubscribeContemplationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnsubscribeContemplationResponse$Type extends MessageType<UnsubscribeContemplationResponse> {
    constructor() {
        super("hyphen.UnsubscribeContemplationResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<UnsubscribeContemplationResponse>): UnsubscribeContemplationResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        if (value !== undefined)
            reflectionMergePartial<UnsubscribeContemplationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnsubscribeContemplationResponse): UnsubscribeContemplationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnsubscribeContemplationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hyphen.UnsubscribeContemplationResponse
 */
export const UnsubscribeContemplationResponse = new UnsubscribeContemplationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetChannelsRequest$Type extends MessageType<GetChannelsRequest> {
    constructor() {
        super("hyphen.GetChannelsRequest", [
            { no: 1, name: "agent_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetChannelsRequest>): GetChannelsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.agentId = 0;
        if (value !== undefined)
            reflectionMergePartial<GetChannelsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetChannelsRequest): GetChannelsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 agent_id */ 1:
                    message.agentId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetChannelsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 agent_id = 1; */
        if (message.agentId !== 0)
            writer.tag(1, WireType.Varint).int32(message.agentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hyphen.GetChannelsRequest
 */
export const GetChannelsRequest = new GetChannelsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetChannelsResponse$Type extends MessageType<GetChannelsResponse> {
    constructor() {
        super("hyphen.GetChannelsResponse", [
            { no: 1, name: "channels", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetChannelsResponse>): GetChannelsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.channels = [];
        if (value !== undefined)
            reflectionMergePartial<GetChannelsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetChannelsResponse): GetChannelsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string channels */ 1:
                    message.channels.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetChannelsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string channels = 1; */
        for (let i = 0; i < message.channels.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.channels[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hyphen.GetChannelsResponse
 */
export const GetChannelsResponse = new GetChannelsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRecentContemplationsRequest$Type extends MessageType<GetRecentContemplationsRequest> {
    constructor() {
        super("hyphen.GetRecentContemplationsRequest", [
            { no: 1, name: "agent_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "channel_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "agent_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetRecentContemplationsRequest>): GetRecentContemplationsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.agentId = 0;
        message.channelId = "";
        message.channelName = "";
        message.agentName = "";
        message.limit = 0;
        if (value !== undefined)
            reflectionMergePartial<GetRecentContemplationsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetRecentContemplationsRequest): GetRecentContemplationsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 agent_id */ 1:
                    message.agentId = reader.int32();
                    break;
                case /* string channel_id */ 2:
                    message.channelId = reader.string();
                    break;
                case /* string channel_name */ 3:
                    message.channelName = reader.string();
                    break;
                case /* string agent_name */ 4:
                    message.agentName = reader.string();
                    break;
                case /* int32 limit */ 5:
                    message.limit = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetRecentContemplationsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 agent_id = 1; */
        if (message.agentId !== 0)
            writer.tag(1, WireType.Varint).int32(message.agentId);
        /* string channel_id = 2; */
        if (message.channelId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.channelId);
        /* string channel_name = 3; */
        if (message.channelName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.channelName);
        /* string agent_name = 4; */
        if (message.agentName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.agentName);
        /* int32 limit = 5; */
        if (message.limit !== 0)
            writer.tag(5, WireType.Varint).int32(message.limit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hyphen.GetRecentContemplationsRequest
 */
export const GetRecentContemplationsRequest = new GetRecentContemplationsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRecentContemplationsResponse$Type extends MessageType<GetRecentContemplationsResponse> {
    constructor() {
        super("hyphen.GetRecentContemplationsResponse", [
            { no: 1, name: "messages", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ContemplationMessage }
        ]);
    }
    create(value?: PartialMessage<GetRecentContemplationsResponse>): GetRecentContemplationsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.messages = [];
        if (value !== undefined)
            reflectionMergePartial<GetRecentContemplationsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetRecentContemplationsResponse): GetRecentContemplationsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated types.ContemplationMessage messages */ 1:
                    message.messages.push(ContemplationMessage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetRecentContemplationsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated types.ContemplationMessage messages = 1; */
        for (let i = 0; i < message.messages.length; i++)
            ContemplationMessage.internalBinaryWrite(message.messages[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hyphen.GetRecentContemplationsResponse
 */
export const GetRecentContemplationsResponse = new GetRecentContemplationsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscribeContemplationRequest$Type extends MessageType<SubscribeContemplationRequest> {
    constructor() {
        super("hyphen.SubscribeContemplationRequest", [
            { no: 1, name: "agent_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SubscribeContemplationRequest>): SubscribeContemplationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.agentId = 0;
        if (value !== undefined)
            reflectionMergePartial<SubscribeContemplationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeContemplationRequest): SubscribeContemplationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 agent_id */ 1:
                    message.agentId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubscribeContemplationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 agent_id = 1; */
        if (message.agentId !== 0)
            writer.tag(1, WireType.Varint).int32(message.agentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hyphen.SubscribeContemplationRequest
 */
export const SubscribeContemplationRequest = new SubscribeContemplationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscribeContemplationResponse$Type extends MessageType<SubscribeContemplationResponse> {
    constructor() {
        super("hyphen.SubscribeContemplationResponse", [
            { no: 1, name: "contemplation", kind: "message", T: () => ContemplationMessage },
            { no: 2, name: "subscription_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SubscribeContemplationResponse>): SubscribeContemplationResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubscribeContemplationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeContemplationResponse): SubscribeContemplationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* types.ContemplationMessage contemplation */ 1:
                    message.contemplation = ContemplationMessage.internalBinaryRead(reader, reader.uint32(), options, message.contemplation);
                    break;
                case /* optional string subscription_id */ 2:
                    message.subscriptionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubscribeContemplationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* types.ContemplationMessage contemplation = 1; */
        if (message.contemplation)
            ContemplationMessage.internalBinaryWrite(message.contemplation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional string subscription_id = 2; */
        if (message.subscriptionId !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.subscriptionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hyphen.SubscribeContemplationResponse
 */
export const SubscribeContemplationResponse = new SubscribeContemplationResponse$Type();
/**
 * @generated ServiceType for protobuf service hyphen.Hyphen
 */
export const Hyphen = new ServiceType("hyphen.Hyphen", [
    { name: "CreateAgent", options: {}, I: CreateAgentRequest, O: CreateAgentResponse },
    { name: "AddTokenAddress", options: {}, I: AddTokenAddressRequest, O: AddTokenAddressResponse },
    { name: "ModifyAgent", options: {}, I: ModifyAgentRequest, O: ModifyAgentResponse },
    { name: "GetUserAgents", options: {}, I: GetUserAgentsRequest, O: GetUserAgentsResponse },
    { name: "SubscribeContemplation", serverStreaming: true, options: {}, I: SubscribeContemplationRequest, O: SubscribeContemplationResponse },
    { name: "UnsubscribeContemplation", options: {}, I: UnsubscribeContemplationRequest, O: UnsubscribeContemplationResponse },
    { name: "GetChannels", options: {}, I: GetChannelsRequest, O: GetChannelsResponse },
    { name: "GetRecentContemplations", options: {}, I: GetRecentContemplationsRequest, O: GetRecentContemplationsResponse },
    { name: "ListAgents", options: {}, I: ListAgentsRequest, O: ListAgentsResponse }
]);
